/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.102
 * Generated at: 2025-04-14 04:14:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.day04;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ajax02Form_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>기상청 단기예보</title>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<h2>한국환경공단_에어코리아_대기오염정보 - 시도별 실시간 측정정보 조회</h2>\r\n");
      out.write("	\r\n");
      out.write("	<button id=\"btnXml\">XML데이터불러오기</button>\r\n");
      out.write("	<button id=\"btnJson\">Json 데이터불러오기</button>\r\n");
      out.write("	\r\n");
      out.write("	<div id=\"result\"></div>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<!--  ajax는 일반적인 Controller로 가지 않는다. RestController로 간다.-->\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("	// 설명과 해설용\r\n");
      out.write("	const weatherExplain = {\r\n");
      out.write("		POP: { label:\"강수확률\", interpret: val => val + \"% 비 올 확률입니다.\"},					\r\n");
      out.write("		PTY: { label:\"강수형태\", interpret: val => ({\"0\":\"없음\",\"1\":\"비\",\"2\":\"비/눈\", \"3\":\"눈\", \"4\":\"thskrl\"}[val] || \"미상\" )},\r\n");
      out.write("		REH: { label:\"습도\", interpret: val => val + \"% 습도 입니다.\"},	\r\n");
      out.write("		SKY: { label:\"하늘상태\", interpret: val => ({\"1\":\"맑음\",\"3\":\"구름많음\", \"4\":\"흐림\"}[val] || \"미상\" )},\r\n");
      out.write("		T3H: { label: \"3시간 기온\", interpret: val => val + \"℃ 예상 기온입니다.\" },\r\n");
      out.write("		TMN: { label: \"일 최저기온\", interpret: val => val + \"℃ 오늘 아침 최저입니다.\" },\r\n");
      out.write("		TMX: { label: \"일 최고기온\", interpret: val => val + \"℃ 오늘 낮 최고입니다.\" },\r\n");
      out.write("		WSD: { label: \"풍속\", interpret: val => val + \"m/s 바람입니다.\" }\r\n");
      out.write("	}\r\n");
      out.write("			\r\n");
      out.write("		$(\"#btnXml\").on(\"click\", function(){\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			$(\"#result\").html(\"<p>XML2 데이터 로딩 중 ... </p>\");\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				\r\n");
      out.write("				url: \"/weatherXml2\",\r\n");
      out.write("				method:\"POST\",\r\n");
      out.write("				dataType: \"xml\",\r\n");
      out.write("				success : function(response){\r\n");
      out.write("					//console.log(response);\r\n");
      out.write("					let table = \"<h2>XML 결과</h2><table>\";\r\n");
      out.write("					table += \"<thead>\";\r\n");
      out.write("					table += \"<tr><td>측정소명</td><td>시도명</td><td>아황상가스 농도</td><td>일산화탄소 농도</td>\";\r\n");
      out.write("					table += \"</thead>\";\r\n");
      out.write("					table +=\"<tbody>\"\r\n");
      out.write("					$(response).find(\"item\").each(function(){\r\n");
      out.write("						let stationName = $(this).find(\"stationName\").text()\r\n");
      out.write("						let sidoName = $(this).find(\"sidoName\").text()\r\n");
      out.write("						let so2Value = $(this).find(\"so2Value\").text()\r\n");
      out.write("						let coValue = $(this).find(\"coValue\").text()\r\n");
      out.write("						\r\n");
      out.write("\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						table += \"<tr>\";\r\n");
      out.write("						table += \"<td>\" + stationName +\"</td>\";\r\n");
      out.write("						table += \"<td>\" + sidoName +\"</td>\";\r\n");
      out.write("						table += \"<td>\" + so2Value +\"</td>\";\r\n");
      out.write("						table += \"<td>\" + coValue +\"</td>\";\r\n");
      out.write("\r\n");
      out.write("						table += \"</tr>\";\r\n");
      out.write("\r\n");
      out.write("					})\r\n");
      out.write("					table += \"</tbody>\";\r\n");
      out.write("					table += \"</table>\";\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					$(\"#result\").html(table);\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error: function(){\r\n");
      out.write("					\r\n");
      out.write("					alert(\"가져오기 실패\");\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("			})\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		})\r\n");
      out.write("		$(\"#btnJson\").on(\"click\", function(){\r\n");
      out.write("			$(\"#result\").html(\"<p>JSON2 데이터 로딩 중 ... </p>\");\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				\r\n");
      out.write("				url: \"/weatherJson2\",\r\n");
      out.write("				method:\"POST\",\r\n");
      out.write("				dataType: \"json\",\r\n");
      out.write("				success : function(response){\r\n");
      out.write("					console.log(response);\r\n");
      out.write("					let items = response.response.body.items;\r\n");
      out.write("					let table = \"<h2>JSON 결과</h2><table>\";\r\n");
      out.write("					table += \"<thead>\";\r\n");
      out.write("					table += \"<tr><td>예보일자</td><td>시간</td><td>항목</td><td>값</td><td>설명</td><td>해석</td></tr>\";\r\n");
      out.write("					table += \"</thead>\";\r\n");
      out.write("					table +=\"<tbody>\"\r\n");
      out.write("		\r\n");
      out.write("					$.each(items, function(i, v){\r\n");
      out.write("						\r\n");
      out.write("						let stationName = v.stationName;\r\n");
      out.write("						let sidoName = v.sidoName;\r\n");
      out.write("						let so2Value = v.so2Value;\r\n");
      out.write("						let coValue = v.coValue;\r\n");
      out.write("	\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						\r\n");
      out.write("						table += \"<tr>\";\r\n");
      out.write("						table += \"<td>\" + stationName +\"</td>\";\r\n");
      out.write("						table += \"<td>\" + sidoName +\"</td>\";\r\n");
      out.write("						table += \"<td>\" + so2Value +\"</td>\";\r\n");
      out.write("						table += \"<td>\" + coValue +\"</td>\";\r\n");
      out.write("\r\n");
      out.write("						table += \"</tr>\";\r\n");
      out.write("						\r\n");
      out.write("					})\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					table += \"</tbody>\";\r\n");
      out.write("					table += \"</table>\";\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("					$(\"#result\").html(table);\r\n");
      out.write("					\r\n");
      out.write("					\r\n");
      out.write("				},\r\n");
      out.write("				error: function(){\r\n");
      out.write("					\r\n");
      out.write("					alert(\"가져오기 실패\");\r\n");
      out.write("				}\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("			})\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
